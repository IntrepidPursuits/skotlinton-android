apply plugin: 'com.android.application'
apply plugin: 'spoon'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "io.intrepid.static-analysis"
apply from: 'version.gradle'
apply from: 'coverage.gradle'
// Uncomment the following line after adding fabric.properties file
//apply plugin: 'io.fabric'

ext.localProperties = new Properties()
def localPropertiesFile = project.rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    ext.localProperties.load(localPropertiesFile.newDataInputStream())
}
ext.getLocalProperty = { propertyName ->
    def property = localProperties.getProperty(propertyName)
    return property == null ? "" : property
}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "io.intrepid.skotlinton"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "io.intrepid.skotlinton.CustomTestRunner"

        // these are debug configs but are placed here instead of the debug block to avoid the "value is being replaced" warning
        buildConfigField "boolean", "LOG_CONSOLE", "true"
        buildConfigField "boolean", "REPORT_CRASH", "false"
    }

    signingConfigs {
        debug {
            storeFile file("../debug.keystore")
            storePassword "password"
            keyAlias "debug"
            keyPassword "password"
        }

        release {
            def fileName = getLocalProperty("signing_file")
            if (!fileName.isEmpty()) {
                storeFile file(fileName)
                storePassword getLocalProperty("signing_password")
                keyAlias getLocalProperty("signing_alias")
                keyPassword getLocalProperty("signing_key_password")
            }
            return true
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }

        qa {
            initWith(buildTypes.debug)

            applicationIdSuffix ".qa"
            versionNameSuffix versionSuffix()

            buildConfigField "boolean", "LOG_CONSOLE", "true"
            buildConfigField "boolean", "REPORT_CRASH", "true"
        }

        release {
            buildConfigField "boolean", "LOG_CONSOLE", "false"
            buildConfigField "boolean", "REPORT_CRASH", "true"

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.crashlytics.sdk.android:crashlytics:2.9.8"

    // Support libraries
    def supportAnnotationLib = 'androidx.annotation:annotation:1.0.1'
    implementation supportAnnotationLib
    implementation "androidx.appcompat:appcompat:1.0.2"
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation "com.google.android.material:material:1.0.0"

    // architecture components
    def lifecycle_version = "2.0.0"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    // Google play services
    def googlePlayVersion = "16.1.0"
    implementation "com.google.android.gms:play-services-base:$googlePlayVersion"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:2.2.5"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"
    implementation "io.reactivex.rxjava2:rxkotlin:2.3.0"
    implementation "com.jakewharton.rxrelay2:rxrelay:2.1.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:2.2.0"

    // Jake Wharton/Square
    def retrofitVersion = "2.5.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.google.code.gson:gson:2.8.5"

    def okhttpVersion = "3.12.0"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    def butterKnifeVersion = "10.0.0"
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    kapt "com.jakewharton:butterknife-compiler:$butterKnifeVersion"
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Other
    implementation "io.intrepid.commonutils:commonutils:0.2.3"

    // LeakCanary
    def leakCanaryVersion = "1.6.3"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    qaImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Common test dependencies
    def junitLib = "junit:junit:4.12"
    def mockitoVersion = "2.23.4"
    def mockitoLib = "org.mockito:mockito-core:$mockitoVersion"
    def mockitoKotlinLib = "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0"
    def kluentLib = 'org.amshove.kluent:kluent-android:1.46'

    // Unit tests
    testImplementation junitLib
    testImplementation mockitoLib
    testImplementation supportAnnotationLib
    testImplementation mockitoKotlinLib
    testImplementation kluentLib
    // need to explicitly declare this as AS 3.3 somehow can't run the test without this
    // https://github.com/MarkusAmshove/Kluent/issues/130
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "android.arch.core:core-testing:1.1.1"

    // UI tests
    androidTestImplementation junitLib
    androidTestImplementation mockitoLib
    androidTestImplementation supportAnnotationLib
    androidTestImplementation mockitoKotlinLib
    androidTestImplementation kluentLib
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"

    androidTestImplementation "androidx.test:core:1.1.0"
    androidTestImplementation "androidx.test:runner:1.1.1"
    androidTestImplementation "androidx.test:rules:1.1.1"
    def espressoVersion = "3.1.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    androidTestImplementation "android.arch.core:core-testing:1.1.1"

    // Forcing to use an older version right now since newer versions have issues with jetifier
    // https://github.com/raphw/byte-buddy/issues/541
    androidTestImplementation("net.bytebuddy:byte-buddy:1.8.22") {
        force = true
    }
    androidTestImplementation("net.bytebuddy:byte-buddy-agent:1.8.22") {
        force = true
    }
}

spoon {
    debug = true
    adbTimeout = 30

    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName
    }

    if (project.hasProperty('spoonMethodName')) {
        methodName = project.spoonMethodName
    }

    grantAllPermissions = true
}
